import { AnnotationBaseInit, AnnotationType, AnnotationEntity, HandleFoundRecord, HandleType, HandleEntity, FlyToOptions, AnnotationEventPayload, EventType, GeoJsonFeatureCollection, GroupRecord, DrawOptions } from '../utils/types';
import { AnnotationGroup, Registry } from './registry';
import { Coordinate, CoordinateCollection } from './coordinate';
import { ViewerInterface } from './viewerInterface';
import * as Cesium from 'cesium';
export declare class Annotation {
    registry: Registry;
    protected viewerInterface: ViewerInterface;
    protected annotationType: AnnotationType;
    id: string;
    points: CoordinateCollection;
    groups: Set<AnnotationGroup>;
    liveUpdate: boolean;
    userInteractive: boolean;
    entity: AnnotationEntity | HandleEntity | null;
    entityProperties: Cesium.Entity.ConstructorOptions;
    handles: {
        [coordinateID: string]: HandleEntity;
    };
    handleType: HandleType;
    handleProperties: Cesium.PointGraphics.ConstructorOptions | Cesium.BillboardGraphics.ConstructorOptions;
    isActive: boolean;
    bypassTerrainSampleOnDrags: boolean;
    attributes: {
        [key: string]: any;
    };
    protected undoHistory: CoordinateCollection[];
    protected redoHistory: CoordinateCollection[];
    protected handleFound: HandleFoundRecord | null;
    protected bypassPointerUp: boolean;
    protected pointerDownDetected: boolean;
    protected lastPointerUpTime: number;
    protected movedDetected: boolean;
    protected dragDetected: boolean;
    protected preDragHistoricalRecord: CoordinateCollection | null;
    protected events: {
        [eventName: string]: ((payload: AnnotationEventPayload) => void)[];
    };
    protected mutedEvents: Set<EventType>;
    lastEventTime: number | null;
    constructor(registry: Registry, options: AnnotationBaseInit);
    on(eventNames: EventType | EventType[], callback: (payload: AnnotationEventPayload) => void): void;
    protected emit(eventName: EventType, payload: AnnotationEventPayload): void;
    muteEvents(eventNames: EventType | EventType[]): void;
    unmuteEvents(eventNames: EventType | EventType[]): void;
    eventIsMuted(eventName: EventType): boolean;
    executeCallback(func: (annotation: Annotation) => {}): void;
    setAttributes(attributes: {
        [key: string]: any;
    }, destructive?: boolean): void;
    setAttribute(attrName: string, value: any): void;
    deleteAttribute(attrName: string): void;
    activate(): void;
    deactivate(): void;
    delete(): void;
    private initGroupRecords;
    joinGroup(group: AnnotationGroup): void;
    leaveGroup(group: AnnotationGroup): void;
    leaveAllGroups(): void;
    joinGroupByRecord(groupRecord: GroupRecord): void;
    isMemberOf(group: AnnotationGroup): boolean;
    protected groupsToRecords(): GroupRecord[];
    removeEntity(): void;
    setEntityProperties(properties: Cesium.Entity.ConstructorOptions, destructive?: boolean): void;
    setEntityProperty(propName: string, value: any): void;
    deleteEntityProperty(propName: string): void;
    removeHandles(): void;
    removeHandleByCoordinateID(id: string): void;
    setHandleProperties(properties: Cesium.PointGraphics.ConstructorOptions | Cesium.BillboardGraphics.ConstructorOptions, destructive?: boolean): void;
    setHandleProperty(propName: string, value: any): void;
    deleteHandleProperty(propName: string): void;
    show(): void;
    hide(): void;
    showHandles(): void;
    hideHandles(): void;
    removePointAtIndex(index: number): void;
    protected handlePointerDown(e: PointerEvent): void;
    protected handlePointerMove(e: PointerEvent): Promise<void>;
    protected handlePointerUp(e: PointerEvent): Promise<void>;
    undo(): void;
    undoAll(): void;
    redo(): void;
    protected recordPointsToUndoHistory(): void;
    protected manualAppendToUndoHistory(points: CoordinateCollection): void;
    protected clearRedoHistory(): void;
    protected updateHandleIdxs(): void;
    protected removeStaleHandles(): void;
    protected syncHandles(): void;
    insertCoordinateAtIndex(coordinate: Coordinate, idx: number): void;
    flyTo(options?: FlyToOptions): Promise<void>;
    toGeoJson(): GeoJsonFeatureCollection | null;
    toWkt(): string | null;
    appendCoordinate(coordinate: Coordinate): void;
    draw(options?: DrawOptions): void;
}
